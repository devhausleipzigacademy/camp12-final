// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String       @id @default(uuid())
  email                    String       @unique
  name                     String?
  Session                  Session[]
  tournamentsCreated       Tournament[] @relation("CreatedTournaments")
  tournamentsParticipating Tournament[] @relation("ParticipatedTournaments")
  meetsCreated             Meet[]       @relation("CreatedMeets")
  meetsParticipating       Meet[]       @relation("ParticipatedMeets")
  badges                   Badge[]
}

model Badge {
  name      String   @id @unique
  icon      String?
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Tournament {
  id             String       @id @default(uuid())
  date           DateTime
  time           String
  duration       Float
  size           Int
  type           String
  mode           String
  public         Boolean      @default(true)
  creatorId      String
  creator        User         @relation("CreatedTournaments", fields: [creatorId], references: [id])
  participants   User[]       @relation("ParticipatedTournaments")
  guests         String[]
  note           String
  tags           Tag[]
  venue          Venue        @relation(fields: [venueId], references: [id])
  venueId        String
  activityType   ActivityType @relation(fields: [activityTypeId], references: [id])
  activityTypeId String
}

model Tag {
  name          String         @id @unique
  venues        Venue[]
  meets         Meet[]
  tournaments   Tournament[]
  activityTypes ActivityType[]
}

model Venue {
  id            String         @id @default(uuid())
  name          String
  location      String
  image         String?
  tags          Tag[]
  tournaments   Tournament[]
  meets         Meet[]
  activityTypes ActivityType[]
}

model Meet {
  id             String       @id @default(uuid())
  date           DateTime
  time           String
  duration       Float
  private        Boolean      @default(false)
  creatorId      String
  creator        User         @relation("CreatedMeets", fields: [creatorId], references: [id])
  participants   User[]       @relation("ParticipatedMeets")
  guests         String[]
  notes          String?
  tags           Tag[]
  venue          Venue        @relation(fields: [venueId], references: [id])
  venueId        String
  activityType   ActivityType @relation(fields: [activityTypeId], references: [id])
  activityTypeId String
}

model ActivityType {
  id                           String       @id @default(uuid())
  name                         String       @unique
  description                  String?
  requiredNumberOfParticipants Int
  tournaments                  Tournament[]
  meets                        Meet[]
  tags                         Tag[]
  venues                       Venue[]
}
