// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String    @id
  googleId           String?   @unique
  email              String    @unique
  name               String?
  picture            String?
  session            Session[]
  meetsCreated       Meet[]    @relation("CreatedMeets")
  meetsParticipating Meet[]    @relation("ParticipatedMeets")
  badges             Badge[]
  friends            User[]    @relation("Friends")
  friendOf           User[]    @relation("Friends")
  settings           Settings?
}

model Badge {
  name      String   @id @unique
  icon      String?
  users     User[]
  createdAt DateTime @default(now())
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

// model Tournament {
//   id             String       @id @default(uuid())
//   date           DateTime
//   time           String
//   duration       Float
//   size           Int
//   type           String
//   mode           String
//   public         Boolean      @default(true)
//   creatorId      String
//   creator        User         @relation("CreatedTournaments", fields: [creatorId], references: [id], onDelete: Cascade)
//   participants   User[]       @relation("ParticipatedTournaments")
//   guests         String[]
//   note           String
//   tags           Tag[]
//   venue          Venue        @relation(fields: [venueId], references: [id])
//   venueId        String
//   activityType   ActivityType @relation(fields: [activityTypeId], references: [id])
//   activityTypeId String
// }

model Tag {
  name          String         @id @unique
  venues        Venue[]
  meets         Meet[]
  activityTypes ActivityType[]
}

model Venue {
  id            String         @id @default(uuid())
  name          String         @unique
  location      String
  image         String?
  tags          Tag[]
  meets         Meet[]
  activityTypes ActivityType[]
  reports       Report[]
}

model Meet {
  id             String       @id @default(uuid())
  date           DateTime
  time           String
  duration       Float
  isPublic       Boolean      @default(false)
  creatorId      String
  creator        User         @relation("CreatedMeets", fields: [creatorId], references: [id], onDelete: Cascade)
  participants   User[]       @relation("ParticipatedMeets")
  guests         Int
  notes          String?
  tags           Tag[]
  Venue          Venue        @relation(fields: [venueId], references: [id], onDelete: Cascade)
  venueId        String
  activityType   ActivityType @relation(fields: [activityTypeId], references: [id])
  activityTypeId String
}

//  date: Date;
//     time: string;
//     duration: number;
//     isPublic: boolean;
//     creator: {
//         connect: {
//             id: string;
//         };
//     };
//     Venue: {
//         connect: {
//             id: string;
//         };
//     };
//     activityType: {
//         connect: {
//             id: string;
//         };
//     };
//     guests: number;
//     notes: string | undefined;

model ActivityType {
  id                           String  @id @default(uuid())
  name                         String  @unique
  description                  String?
  requiredNumberOfParticipants Int
  meets                        Meet[]
  tags                         Tag[]
  venues                       Venue[]
}

enum VisibilityStatus {
  Public
  Friends_Only
  Private
}

model Settings {
  friendsVisibility VisibilityStatus
  profileVisibility VisibilityStatus
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String           @unique
}

model Report {
  id      String   @id @default(uuid())
  issue   String
  date    DateTime
  time    String
  detail  String?
  venue   Venue    @relation(fields: [venueId], references: [id])
  venueId String
}
