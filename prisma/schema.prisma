// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String       @id @default(uuid())
  email                    String       @unique
  name                     String?      @unique
  Session                  Session[]
  tournamentsCreated       Tournament[] @relation("CreatedTournaments")
  tournamentsParticipating Tournament[] @relation("ParticipatedTournaments")
  meetsCreated             Meet[]       @relation("CreatedMeets")
  meetsParticipating       Meet[]       @relation("ParticipatedMeets")
  badges                   Badge[]
  settings                 Settings?
}

model Badge {
  name      String   @id @unique
  icon      String?
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Tournament {
  id           String   @id @default(uuid())
  date         DateTime
  time         String
  duration     Float
  size         Int
  type         String
  Mode         String
  public       Boolean  @default(true)
  creatorId    String
  creator      User     @relation("CreatedTournaments", fields: [creatorId], references: [id])
  participants User[]   @relation("ParticipatedTournaments")
  guests       String[]
  note         String
  tags         Tag[]
  Venue        Venue    @relation(fields: [venueId], references: [id])
  venueId      String
}

model Tag {
  name        String       @id @unique
  venues      Venue[]
  meets       Meet[]
  tournaments Tournament[]
}

model Venue {
  id          String       @id @default(uuid())
  location    String
  image       String?
  tags        Tag[]
  tournaments Tournament[]
  meets       Meet[]
}

model Meet {
  id           String   @id @default(uuid())
  date         DateTime
  time         String
  duration     Float
  private      Boolean  @default(false)
  creatorId    String
  creator      User     @relation("CreatedMeets", fields: [creatorId], references: [id])
  participants User[]   @relation("ParticipatedMeets")
  guests       String[]
  notes        String?
  tags         Tag[]
  Venue        Venue    @relation(fields: [venueId], references: [id])
  venueId      String
}

model Settings {
  friendsVisibility String
  profileVisibility String
  friend            User   @relation(fields: [userId], references: [id])
  userId            String @unique
}
